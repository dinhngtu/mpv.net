name: .NET
on:
  push:
    branches: [ "master" ]
jobs:
  build:
    runs-on: windows-latest
    env:
      Configuration: Release
      Solution_Name: src/mpv.net.sln
      Wap_Project_Name: mpv_net_package
      Wap_Project_Directory: src/Package
      Wap_Project_Path: src/Package/mpv.net.package.wapproj
      Pfx_Name: GitHubActionsWorkflow.pfx
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1
    - name: Download dependencies
      run: |
        function Get-MpvDependencies {
          param(
            [string]$Uri,
            [string]$OutFile,
            [string]$FileHash,
            [string]$OutDir,
            [string[]]$FileNames
          )
          Invoke-WebRequest -Uri $Uri -OutFile $OutFile
          if ((Get-FileHash $OutFile -Algorithm SHA256 | select -expand Hash) -ine $FileHash) {
            throw "Bad file hash"
          }
          7z x "$OutFile" "-o$OutDir" -aoa $FileNames
        }
        Get-MpvDependencies -Uri "https://mediaarea.net/download/binary/libmediainfo0/23.06/MediaInfo_DLL_23.06_Windows_x64_WithoutInstaller.7z" -OutFile "MediaInfo_DLL_23.04_Windows_x64_WithoutInstaller.7z" -FileHash 95626DC8A9360EB76A6249D4768A3DCCF0E3A197B87CF8CACE32D43427D05F66 -OutDir src/bin -FileNames MediaInfo.dll
        Get-MpvDependencies -Uri "https://github.com/shinchiro/mpv-winbuild-cmake/releases/download/20230701/mpv-dev-x86_64-v3-20230701-git-0bfafd2.7z" -OutFile "mpv-dev-x86_64-v3-20230614-git-f1c9daa.7z" -FileHash 98734EBB2E227D74F02448D39BB3614226930302ED1685C46678578A77500BED -OutDir src/bin -FileNames libmpv-2.dll
        Get-MpvDependencies -Uri "https://github.com/shinchiro/mpv-winbuild-cmake/releases/download/20230701/mpv-x86_64-v3-20230701-git-0bfafd2.7z" -OutFile "mpv-x86_64-v3-20230614-git-f1c9daa.7z" -FileHash 194A9793B55D66962DBCEB5FF991B8696CEDBB67355A822D6314057709786D43 -OutDir src/bin -FileNames mpv.com
        Rename-Item -Path .\src\bin\mpv.com -NewName mpvnet.com
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath $env:Pfx_Name
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
    - name: Create the app package
      run: msbuild $env:Solution_Name /t:${env:Wap_Project_Name}:Rebuild /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:GenerateTemporaryStoreCertificate=False /p:AppxPackageSigningEnabled=True /p:PackageCertificateKeyFile=$env:Pfx_Name /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x64
        Appx_Package_Build_Mode: StoreUpload
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\$env:Pfx_Name
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
