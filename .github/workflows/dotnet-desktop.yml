name: .NET
on:
  push:
    branches: [ "master" ]
jobs:
  build:
    runs-on: windows-latest
    env:
      Configuration: Release
      Platform: x64
      Solution_Name: src/MpvNet.sln
      Wap_Project_Name: mpv_net_package
      Wap_Project_Directory: src/MpvNet.Windows/Package
      Wap_Project_Path: src/MpvNet.Windows/Package/mpv.net.package.wapproj
      Pfx_Name: GitHubActionsWorkflow.pfx
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1
    - name: Download dependencies
      run: |
        function Get-MpvDependencies {
          param(
            [string]$Uri,
            [string]$OutFile,
            [string]$FileHash,
            [string]$OutDir,
            [string[]]$FileNames
          )
          Invoke-WebRequest -Uri $Uri -OutFile $OutFile
          if ((Get-FileHash $OutFile -Algorithm SHA256 | select -expand Hash) -ine $FileHash) {
            throw "Bad file hash"
          }
          7z x "$OutFile" "-o$OutDir" -aoa $FileNames
        }
        Get-MpvDependencies -Uri "https://mediaarea.net/download/binary/libmediainfo0/23.11/MediaInfo_DLL_23.11_Windows_x64_WithoutInstaller.7z" -OutFile "MediaInfo.7z" -FileHash AB3BFC67E6DFA98BEF08FD0A25EA50406C4C20D88CBA4DEB6ADB0DCA165101BD -OutDir src/MpvNet.Windows/bin -FileNames MediaInfo.dll
        Get-MpvDependencies -Uri "https://github.com/shinchiro/mpv-winbuild-cmake/releases/download/20231201/mpv-dev-x86_64-v3-20231201-git-67aa568.7z" -OutFile "mpv-dev-x86_64-v3.7z" -FileHash 4161AB03FF1A42F63FAF6E9D329F5789C6B3093123A656CD9AA2332A6586649A -OutDir src/MpvNet.Windows/bin -FileNames libmpv-2.dll
        Get-MpvDependencies -Uri "https://github.com/shinchiro/mpv-winbuild-cmake/releases/download/20231201/mpv-x86_64-v3-20231201-git-67aa568.7z" -OutFile "mpv-x86_64-v3.7z" -FileHash B144D4CEFF6020F7FDCE6D2E29FD69F8DA3CCC42411D00C390021820FCCB6353 -OutDir src/MpvNet.Windows/bin -FileNames mpv.com
        Rename-Item -Path ./src/MpvNet.Windows/bin/mpv.com -NewName mpvnet.com
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration /p:Platform=$env:Platform
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath $env:Pfx_Name
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
    - name: Create the app package
      run: msbuild $env:Solution_Name /t:${env:Wap_Project_Name}:Rebuild /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:GenerateTemporaryStoreCertificate=False /p:AppxPackageSigningEnabled=True /p:PackageCertificateKeyFile=$env:Pfx_Name /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: ${{ env.Platform }}
        Appx_Package_Build_Mode: StoreUpload
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\$env:Pfx_Name
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
